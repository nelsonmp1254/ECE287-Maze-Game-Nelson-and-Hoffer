library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;
use IEEE.NUMERIC_STD.ALL;

entity Maze_Game is
    Port ( CLK : in  STD_LOGIC;
           RST : in  STD_LOGIC;
			  InputLeft : in STD_LOGIC;
			  InputRight : in STD_LOGIC;
			  InputUp : in STD_LOGIC;
			  InputDown : in STD_LOGIC;
			  VGA_clk : out STD_LOGIC; 
           HSYNC : out  STD_LOGIC;
           VSYNC : out  STD_LOGIC;
           RGB : out  STD_LOGIC_VECTOR (2 downto 0));
end Maze_Game;

architecture Behavioral of Maze_Game is

	signal clk25 : std_logic := '0';
	signal counter : std_logic_vector(21 downto 0);
	
	constant HD : integer := 639;  --  639   Horizontal Display (640)
	constant HFP : integer := 16;         --   16   Right border (front porch)
	constant HSP : integer := 96;       --   96   Sync pulse (Retrace)
	constant HBP : integer := 48;        --   48   Left boarder (back porch)
	constant VD : integer := 479;   --  479   Vertical Display (480)
	constant VFP : integer := 10;       	 --   10   Right border (front porch)
	constant VSP : integer := 2;				 --    2   Sync pulse (Retrace)
	constant VBP : integer := 33;       --   33   Left boarder (back porch)
	signal hPos : integer := 0;			-- horizontal position of pixels
	signal vPos : integer := 0;			-- vertical position of pixels
	signal charCenterV : integer := 5;  -- center of character. Used to determine the vertical pixels to be colored by drawChar process, allows for easier movement
	signal charCenterH : integer := 5;  -- *** same as above, but horizontal 
	signal videoOn : std_logic := '0';
	
begin


clk_div:process(CLK)
begin
	if(CLK'event and CLK = '1')then
		clk25 <= not clk25;
	end if;
end process;
VGA_CLK <= clk25;

Horizontal_position_counter:process(clk25, RST)
begin
	if(RST = '1')then
		hpos <= 0;
	elsif(clk25'event and clk25 = '1')then
		if (hPos = (HD + HFP + HSP + HBP)) then
			hPos <= 0;
		else
			hPos <= hPos + 1;
		end if;
	end if;
end process;

Vertical_position_counter:process(clk25, RST, hPos)
begin
	if(RST = '1')then
		vPos <= 0;
	elsif(clk25'event and clk25 = '1')then
		if(hPos = (HD + HFP + HSP + HBP))then
			if (vPos = (VD + VFP + VSP + VBP)) then
				vPos <= 0;
			else
				vPos <= vPos + 1;
			end if;
		end if;
	end if;
end process;

Horizontal_Synchronisation:process(clk25, RST, hPos)
begin
	if(RST = '1')then
		HSYNC <= '0';
	elsif(clk25'event and clk25 = '1')then
		if((hPos <= (HD + HFP)) OR (hPos > HD + HFP + HSP))then
			HSYNC <= '1';
		else
			HSYNC <= '0';
		end if;
	end if;
end process;


Vertical_Synchronisation:process(clk25, RST, vPos)
begin
	if(RST = '1')then
		VSYNC <= '0';
	elsif(clk25'event and clk25 = '1')then
		if((vPos <= (VD + VFP)) OR (vPos > VD + VFP + VSP))then
			VSYNC <= '1';
		else
			VSYNC <= '0';
		end if;
	end if;
end process;

video_on:process(clk25, RST, hPos, vPos)
begin
	if(RST = '1')then
		videoOn <= '0';
	elsif(clk25'event and clk25 = '1')then
		if(hPos <= HD and vPos <= VD)then
			videoOn <= '1';
		else
			videoOn <= '0';
		end if;
	end if;
end process;


drawChar:process(clk25, RST, hPos, vPos, videoOn, charCenterH, charCenterV)
begin
	if(RST = '1')then
		RGB <= "000";
	elsif(clk25'event and clk25 = '1')then
		if(videoOn = '1')then
			if((hPos >= charCenterH + 5 and hPos <= charCenterH + 15) AND (vPos >= charCenterV + 5 and vPos <= charCenterV + 15))then
				RGB <= "101";
			elsif((vPos >= 420 and vPos <= 480) or (vPos >= 0 and vPos<= 4) or (hPos >= 0 and hPos<= 4) or (hPos >= 600 and hPos <= 640) or (vPos >=  50 and vPos <= 54 and hPos >= 50 and hPos <= 250))then
				RGB <= "000";
			elsif ((vPos >= 350 and vPos <= 370 and hPos >= 230 and hPos <= 250))then
				RGB <= "110";
				
				else
				RGB <= "111";
			
			
			
			end if;
		else
			RGB <= "000";
		end if;

	end if;

end process;


		




move:process(clk25, videoOn, InputLeft, InputRight, InputUp, InputDown, charCenterH, charCenterV)
begin 

	if(clk25'event and clk25 = '1')then
	  if counter < "1111010111100001000000" then
	  counter <= counter + 40;
	  else
		if(videoOn = '1' and InputUp = '0') and not (charCenterV <= 4) and not (charCenterV = 50 and charCenterH > 50 and charCenterH < 250) then
			charcenterV <= charCenterV - 1;
		elsif(videoOn = '1' and InputDown = '0') and not (charCenterV >= 450)then
			charcenterV <= charCenterV + 1;
		elsif(videoOn = '1' and InputLeft = '0') and not (charCenterH <= 4 )then
			charcenterH <= charCenterH - 1;
		elsif(videoOn = '1' and InputRight = '0') and not (charCenterH >= 610)then
			charcenterH <= charCenterH + 1;
		end if;
		counter <= (others => '0');
		end if;
		end if;
	
end process;





end Behavioral;